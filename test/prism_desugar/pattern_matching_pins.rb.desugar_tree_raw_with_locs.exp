ClassDef{
  loc = test/testdata/desugar/pattern_matching_pins.rb:3:1-11:4
  kind = class
  name = EmptyTree{ loc = test/testdata/desugar/pattern_matching_pins.rb }
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      loc = test/testdata/desugar/pattern_matching_pins.rb:3:1-11:4
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    Assign{
      loc = test/testdata/desugar/pattern_matching_pins.rb:3:1-3:8
      lhs = UnresolvedIdent{
        loc = test/testdata/desugar/pattern_matching_pins.rb:3:1-3:2
        kind = Local
        name = <U a>
      }
      rhs = Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:3:5-3:8, value = nil }
    }

    Assign{
      loc = test/testdata/desugar/pattern_matching_pins.rb:4:1-4:6
      lhs = UnresolvedIdent{
        loc = test/testdata/desugar/pattern_matching_pins.rb:4:1-4:2
        kind = Local
        name = <U b>
      }
      rhs = Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:4:5-4:6, value = 1 }
    }

    Assign{
      loc = test/testdata/desugar/pattern_matching_pins.rb:5:1-5:7
      lhs = UnresolvedIdent{
        loc = test/testdata/desugar/pattern_matching_pins.rb:5:1-5:2
        kind = Local
        name = <U c>
      }
      rhs = Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:5:5-5:7, value = "" }
    }

    InsSeq{
      loc = test/testdata/desugar/pattern_matching_pins.rb:7:1-11:4
      stats = [
        Assign{
          loc = test/testdata/desugar/pattern_matching_pins.rb:7:6-7:9
          lhs = UnresolvedIdent{
            loc = test/testdata/desugar/pattern_matching_pins.rb:7:6-7:9
            kind = Local
            name = <D <U <assignTemp>> $2>
          }
          rhs = Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:7:6-7:9, value = nil }
        }
      ],
      expr = If{
        loc = test/testdata/desugar/pattern_matching_pins.rb:8:1-8:8
        cond = Send{
          loc = test/testdata/desugar/pattern_matching_pins.rb:8:4-8:8
          flags = {rewriterSynthesized}
          recv = Send{
            loc = test/testdata/desugar/pattern_matching_pins.rb:8:4-8:8
            flags = {}
            recv = ConstantLit{
              loc = test/testdata/desugar/pattern_matching_pins.rb:8:4-8:8
              symbol = (module ::T)
              orig = nullptr
            }
            fun = <U unsafe>
            block = nullptr
            pos_args = 1
            args = [
              ConstantLit{
                loc = test/testdata/desugar/pattern_matching_pins.rb:8:4-8:8
                symbol = (module ::Kernel)
                orig = nullptr
              }
            ]
          }
          fun = <U raise>
          block = nullptr
          pos_args = 1
          args = [
            Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:8:4-8:8, value = "Sorbet rewriter pass partially unimplemented" }
          ]
        }
        thenp = EmptyTree{ loc = test/testdata/desugar/pattern_matching_pins.rb }
        elsep = If{
          loc = test/testdata/desugar/pattern_matching_pins.rb:9:1-9:11
          cond = Send{
            loc = test/testdata/desugar/pattern_matching_pins.rb:9:4-9:11
            flags = {rewriterSynthesized}
            recv = Send{
              loc = test/testdata/desugar/pattern_matching_pins.rb:9:4-9:11
              flags = {}
              recv = ConstantLit{
                loc = test/testdata/desugar/pattern_matching_pins.rb:9:4-9:11
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  loc = test/testdata/desugar/pattern_matching_pins.rb:9:4-9:11
                  symbol = (module ::Kernel)
                  orig = nullptr
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:9:4-9:11, value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
          thenp = EmptyTree{ loc = test/testdata/desugar/pattern_matching_pins.rb }
          elsep = If{
            loc = test/testdata/desugar/pattern_matching_pins.rb:10:1-10:6
            cond = Send{
              loc = test/testdata/desugar/pattern_matching_pins.rb:10:4-10:6
              flags = {rewriterSynthesized}
              recv = Send{
                loc = test/testdata/desugar/pattern_matching_pins.rb:10:4-10:6
                flags = {}
                recv = ConstantLit{
                  loc = test/testdata/desugar/pattern_matching_pins.rb:10:4-10:6
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  ConstantLit{
                    loc = test/testdata/desugar/pattern_matching_pins.rb:10:4-10:6
                    symbol = (module ::Kernel)
                    orig = nullptr
                  }
                ]
              }
              fun = <U raise>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ loc = test/testdata/desugar/pattern_matching_pins.rb:10:4-10:6, value = "Sorbet rewriter pass partially unimplemented" }
              ]
            }
            thenp = EmptyTree{ loc = test/testdata/desugar/pattern_matching_pins.rb }
            elsep = EmptyTree{ loc = test/testdata/desugar/pattern_matching_pins.rb }
          }
        }
      }
    }
  ]
}
