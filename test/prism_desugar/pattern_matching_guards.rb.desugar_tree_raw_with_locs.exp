ClassDef{
  loc = test/testdata/desugar/pattern_matching_guards.rb:3:1-18:17
  kind = class
  name = EmptyTree{ loc = test/testdata/desugar/pattern_matching_guards.rb }
  symbol = <C <U <root>>>
  ancestors = [ConstantLit{
      loc = test/testdata/desugar/pattern_matching_guards.rb:3:1-18:17
      symbol = (class ::<todo sym>)
      orig = nullptr
    }]
  rhs = [
    Assign{
      loc = test/testdata/desugar/pattern_matching_guards.rb:3:1-3:8
      lhs = UnresolvedIdent{
        loc = test/testdata/desugar/pattern_matching_guards.rb:3:1-3:2
        kind = Local
        name = <U x>
      }
      rhs = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:3:5-3:8, value = nil }
    }

    Assign{
      loc = test/testdata/desugar/pattern_matching_guards.rb:5:1-16:4
      lhs = UnresolvedIdent{
        loc = test/testdata/desugar/pattern_matching_guards.rb:5:1-5:2
        kind = Local
        name = <U y>
      }
      rhs = InsSeq{
        loc = test/testdata/desugar/pattern_matching_guards.rb:5:5-16:4
        stats = [
          Assign{
            loc = test/testdata/desugar/pattern_matching_guards.rb:5:10-5:13
            lhs = UnresolvedIdent{
              loc = test/testdata/desugar/pattern_matching_guards.rb:5:10-5:13
              kind = Local
              name = <D <U <assignTemp>> $2>
            }
            rhs = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:5:10-5:13, value = nil }
          }
        ],
        expr = If{
          loc = test/testdata/desugar/pattern_matching_guards.rb:6:1-7:4
          cond = Send{
            loc = test/testdata/desugar/pattern_matching_guards.rb:6:4-6:5
            flags = {rewriterSynthesized}
            recv = Send{
              loc = test/testdata/desugar/pattern_matching_guards.rb:6:4-6:5
              flags = {}
              recv = ConstantLit{
                loc = test/testdata/desugar/pattern_matching_guards.rb:6:4-6:5
                symbol = (module ::T)
                orig = nullptr
              }
              fun = <U unsafe>
              block = nullptr
              pos_args = 1
              args = [
                ConstantLit{
                  loc = test/testdata/desugar/pattern_matching_guards.rb:6:4-6:5
                  symbol = (module ::Kernel)
                  orig = nullptr
                }
              ]
            }
            fun = <U raise>
            block = nullptr
            pos_args = 1
            args = [
              Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:6:4-6:5, value = "Sorbet rewriter pass partially unimplemented" }
            ]
          }
          thenp = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:7:3-7:4, value = 1 }
          elsep = If{
            loc = test/testdata/desugar/pattern_matching_guards.rb:8:1-9:4
            cond = Send{
              loc = test/testdata/desugar/pattern_matching_guards.rb:8:4-8:5
              flags = {rewriterSynthesized}
              recv = Send{
                loc = test/testdata/desugar/pattern_matching_guards.rb:8:4-8:5
                flags = {}
                recv = ConstantLit{
                  loc = test/testdata/desugar/pattern_matching_guards.rb:8:4-8:5
                  symbol = (module ::T)
                  orig = nullptr
                }
                fun = <U unsafe>
                block = nullptr
                pos_args = 1
                args = [
                  ConstantLit{
                    loc = test/testdata/desugar/pattern_matching_guards.rb:8:4-8:5
                    symbol = (module ::Kernel)
                    orig = nullptr
                  }
                ]
              }
              fun = <U raise>
              block = nullptr
              pos_args = 1
              args = [
                Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:8:4-8:5, value = "Sorbet rewriter pass partially unimplemented" }
              ]
            }
            thenp = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:9:3-9:4, value = 2 }
            elsep = If{
              loc = test/testdata/desugar/pattern_matching_guards.rb:10:1-11:4
              cond = Send{
                loc = test/testdata/desugar/pattern_matching_guards.rb:10:4-10:5
                flags = {rewriterSynthesized}
                recv = Send{
                  loc = test/testdata/desugar/pattern_matching_guards.rb:10:4-10:5
                  flags = {}
                  recv = ConstantLit{
                    loc = test/testdata/desugar/pattern_matching_guards.rb:10:4-10:5
                    symbol = (module ::T)
                    orig = nullptr
                  }
                  fun = <U unsafe>
                  block = nullptr
                  pos_args = 1
                  args = [
                    ConstantLit{
                      loc = test/testdata/desugar/pattern_matching_guards.rb:10:4-10:5
                      symbol = (module ::Kernel)
                      orig = nullptr
                    }
                  ]
                }
                fun = <U raise>
                block = nullptr
                pos_args = 1
                args = [
                  Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:10:4-10:5, value = "Sorbet rewriter pass partially unimplemented" }
                ]
              }
              thenp = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:11:3-11:4, value = 3 }
              elsep = If{
                loc = test/testdata/desugar/pattern_matching_guards.rb:12:1-13:5
                cond = Send{
                  loc = test/testdata/desugar/pattern_matching_guards.rb:12:4-12:9
                  flags = {rewriterSynthesized}
                  recv = Send{
                    loc = test/testdata/desugar/pattern_matching_guards.rb:12:4-12:9
                    flags = {}
                    recv = ConstantLit{
                      loc = test/testdata/desugar/pattern_matching_guards.rb:12:4-12:9
                      symbol = (module ::T)
                      orig = nullptr
                    }
                    fun = <U unsafe>
                    block = nullptr
                    pos_args = 1
                    args = [
                      ConstantLit{
                        loc = test/testdata/desugar/pattern_matching_guards.rb:12:4-12:9
                        symbol = (module ::Kernel)
                        orig = nullptr
                      }
                    ]
                  }
                  fun = <U raise>
                  block = nullptr
                  pos_args = 1
                  args = [
                    Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:12:4-12:9, value = "Sorbet rewriter pass partially unimplemented" }
                  ]
                }
                thenp = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:13:3-13:5, value = 45 }
                elsep = Literal{ loc = test/testdata/desugar/pattern_matching_guards.rb:15:3-15:4, value = 6 }
              }
            }
          }
        }
      }
    }

    Send{
      loc = test/testdata/desugar/pattern_matching_guards.rb:18:1-18:17
      flags = {}
      recv = UnresolvedConstantLit{
        loc = test/testdata/desugar/pattern_matching_guards.rb:18:1-18:2
        cnst = <C <U T>>
        scope = EmptyTree{ loc = test/testdata/desugar/pattern_matching_guards.rb }
      }
      fun = <U reveal_type>
      block = nullptr
      pos_args = 1
      args = [
        UnresolvedIdent{
          loc = test/testdata/desugar/pattern_matching_guards.rb:18:15-18:16
          kind = Local
          name = <U y>
        }
      ]
    }
  ]
}
