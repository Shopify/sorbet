class <emptyTree><<C <root>>> < (::<todo sym>)
  module <emptyTree>::<C Interface><<C <todo sym>>> < ()
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.abstract().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.extend(<emptyTree>::<C T>::<C Helpers>)

    <self>.interface!()

    <runtime method definition of foo>
  end

  class <emptyTree>::<C Override><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.override().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.overridable().void()
    end

    def bar<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.include(<emptyTree>::<C Interface>)

    <runtime method definition of foo>

    <runtime method definition of bar>
  end

  class <emptyTree>::<C Incompatible><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.override(:allow_incompatible, true).returns(<emptyTree>::<C Integer>)
    end

    def foo<<todo method>>(&<blk>)
      123
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.include(<emptyTree>::<C Interface>)

    <runtime method definition of foo>
  end

  class <emptyTree>::<C Final><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>, :final) do ||
      <self>.void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of foo>
  end

  class <emptyTree>::<C InvalidInvocationsOnSig><<C <todo sym>>> < (::<todo sym>)
    <self>.sig()

    def foo<<todo method>>(a, &<blk>)
      <emptyTree>
    end

    <self>.sig()

    def bar<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def baz<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def blah<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def bip<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def bop<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    nil.params(:a, <emptyTree>::<C Integer>)

    <runtime method definition of foo>

    nil.returns(<emptyTree>::<C Integer>)

    <runtime method definition of bar>

    nil.void()

    <runtime method definition of baz>

    nil.checked(:never)

    <runtime method definition of blah>

    nil.on_failure(:soft, :notify, "me")

    <runtime method definition of bip>

    nil.type_parameters(:T)

    <runtime method definition of bop>
  end

  class <emptyTree>::<C DuplicateBlock><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>, :final) do ||
      <self>.override().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.include(<emptyTree>::<C Interface>)

    <runtime method definition of foo>
  end

  class <emptyTree>::<C WithoutRuntime><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<emptyTree>::<C T>::<C Sig>::<C WithoutRuntime>, :final) do ||
      <self>.void()
    end

    def baz<<todo method>>(&<blk>)
      <emptyTree>
    end

    <emptyTree>::<C T>::<C Sig>::<C WithoutRuntime>.sig()

    def bar<<todo method>>(a, &<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<emptyTree>::<C T>::<C Sig>::<C WithoutRuntime>, :final) do ||
      <self>.override().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.include(<emptyTree>::<C Interface>)

    <runtime method definition of baz>

    nil.params(:a, <emptyTree>::<C Integer>)

    <runtime method definition of bar>

    <runtime method definition of foo>
  end

  class <emptyTree>::<C MissingBlocks><<C <todo sym>>> < (::<todo sym>)
    <self>.sig()

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def bar<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def baz<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def qux<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.sig()

    def quux<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <runtime method definition of foo>

    nil.final()

    <runtime method definition of bar>

    nil.abstract()

    <runtime method definition of baz>

    nil.override()

    <runtime method definition of qux>

    nil.overridable()

    <runtime method definition of quux>
  end

  class <emptyTree>::<C InstructionSequenceInSig><<C <todo sym>>> < (::<todo sym>)
    <self>.sig()

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    nil.final() do ||
      begin
        <emptyTree>::<C Kernel>.puts("")
        <self>.void()
      end
    end

    <runtime method definition of foo>
  end

  class <emptyTree>::<C DuplicateInvocations><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.overridable().overridable().void()
    end

    def bar<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.override().override().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.abstract().abstract().void()
    end

    def baz<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.extend(<emptyTree>::<C T>::<C Helpers>)

    <self>.include(<emptyTree>::<C Interface>)

    <self>.abstract!()

    <runtime method definition of bar>

    <runtime method definition of foo>

    <runtime method definition of baz>
  end

  class <emptyTree>::<C DuplicateButMissingBlock><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>, :final) do ||
      <self>.void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.include(<emptyTree>::<C Interface>)

    nil.override()

    <runtime method definition of foo>
  end

  class <emptyTree>::<C InvalidInvocationAfterBlock><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>, :final) do ||
      <self>.void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    nil.checked(:never)

    <runtime method definition of foo>
  end

  module <emptyTree>::<C ValidInterface><<C <todo sym>>> < ()
    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.abstract().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.abstract().void()
    end

    def bar<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.abstract().void()
    end

    def baz<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.extend(<emptyTree>::<C T>::<C Helpers>)

    <self>.interface!()

    <runtime method definition of foo>

    <runtime method definition of bar>

    <runtime method definition of baz>
  end

  class <emptyTree>::<C ValidDoubleChain><<C <todo sym>>> < (::<todo sym>)
    ::Sorbet::Private::Static.sig(<self>, :final) do ||
      <self>.override().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.override().void()
    end

    def bar<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::Sorbet::Private::Static.sig(<self>) do ||
      <self>.override(:allow_incompatible, true).void()
    end

    def baz<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(<emptyTree>::<C T>::<C Sig>)

    <self>.include(<emptyTree>::<C ValidInterface>)

    <runtime method definition of foo>

    <runtime method definition of bar>

    <runtime method definition of baz>
  end
end
