class <emptyTree><<C <root>>> < (::<todo sym>)
  class <emptyTree>::<C Foo><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.void()
    end

    def e1<<todo method>>(&<blk>)
      <emptyTree>
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.abstract().params(:a, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def m1<<todo method>>(a, &<blk>)
      <emptyTree>
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.abstract().params(:a, <emptyTree>::<C Integer>, :b, <emptyTree>::<C String>, :c, <emptyTree>::<C Integer>, :d, <emptyTree>::<C String>, :e, <emptyTree>::<C Integer>, :f, <emptyTree>::<C Integer>, :<blk>, ::<root>::<C T>.proc().void()).returns(<emptyTree>::<C String>)
    end

    def m2<<todo method>>(a, b = ::<root>::<C T>.unsafe(nil), *c, d:, e: = ::<root>::<C T>.unsafe(nil), *f:, &<blk>)
      <emptyTree>
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.abstract().returns(<emptyTree>::<C String>)
    end

    def m3<<todo method>>(&<blk>)
      <emptyTree>
    end

    <runtime method definition of e1>

    <self>.extend(::<root>::<C T>::<C Helpers>)

    <self>.abstract!()

    <self>.public(<runtime method definition of m1>)

    <self>.public(<runtime method definition of m2>)

    <self>.private(<runtime method definition of m3>)
  end

  class <emptyTree>::<C Bar><<C <todo sym>>> < (<emptyTree>::<C Foo>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.override().params(:a, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def m1<<todo method>>(a, &<blk>)
      "bar"
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.override().params(:a, <emptyTree>::<C Integer>, :b, <emptyTree>::<C String>, :c, <emptyTree>::<C Integer>, :d, <emptyTree>::<C String>, :e, <emptyTree>::<C Integer>, :f, <emptyTree>::<C Integer>, :g, ::<root>::<C T>.proc().void()).returns(<emptyTree>::<C String>)
    end

    def m2<<todo method>>(a, b = "", *c, d:, e: = 1, *f:, &g)
      "bar"
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.override().returns(<emptyTree>::<C String>)
    end

    def m3<<todo method>>(&<blk>)
      "bar"
    end

    <runtime method definition of m1>

    <runtime method definition of m2>

    <self>.private(<runtime method definition of m3>)
  end

  class <emptyTree>::<C Baz><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.returns(<emptyTree>::<C String>)
    end

    def bar<<todo method>>(&<blk>)
      <self>.foo(42)
    end

    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.abstract().params(:a, <emptyTree>::<C Integer>).returns(<emptyTree>::<C String>)
    end

    def foo<<todo method>>(a, &<blk>)
      <emptyTree>
    end

    <runtime method definition of bar>

    <self>.extend(::<root>::<C T>::<C Helpers>)

    <self>.abstract!()

    <self>.public(<runtime method definition of foo>)
  end

  class <emptyTree>::<C Qux><<C <todo sym>>> < (::<todo sym>)
    ::<root>::<C Sorbet>::<C Private>::<C Static>.sig(::<root>::<C T>::<C Sig>::<C WithoutRuntime>) do ||
      <self>.abstract().void()
    end

    def foo<<todo method>>(&<blk>)
      <emptyTree>
    end

    <self>.extend(::<root>::<C T>::<C Helpers>)

    <self>.public(<runtime method definition of foo>)
  end
end
